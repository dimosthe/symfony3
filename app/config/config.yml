imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi:             ~
    #translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # http://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id:  session.handler.native_file
        save_path:   "%kernel.root_dir%/../var/sessions/%kernel.environment%"
    fragments:       ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/../var/data/data.sqlite"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

doctrine_migrations:
    dir_name: "%kernel.root_dir%/DoctrineMigrations"
    namespace: Application\Migrations
    table_name: migration_versions
    name: Application Migrations

old_sound_rabbit_mq:
    connections:
        broker_connection:
            host:     "%rabbit_mq_host%"
            port:     "%rabbit_mq_port%"
            user:     "%rabbit_mq_user%"
            password: "%rabbit_mq_pswd%"
            vhost:    '/'
            lazy:     true
            connection_timeout: 3
            read_write_timeout: 3

            # requires php-amqplib v2.4.1+ and PHP5.4+
            keepalive: false

            # requires php-amqplib v2.4.1+
            heartbeat: 0

            #requires php_sockets.dll
            #use_socket: true # default false
        another:
            # A different (unused) connection defined by an URL. One can omit all parts,
            # except the scheme (amqp:). If both segment in the URL and a key value (see above)
            # are given the value from the URL takes precedence.
            # See https://www.rabbitmq.com/uri-spec.html on how to encode values.
            url: 'amqp://guest:password@localhost:5672/vhost?lazy=1&connection_timeout=6'
    producers:
        send_email:
            connection:       broker_connection
            exchange_options: {name: 'send_email', type: direct}
            queue_options:    {name: 'email_queue'}
            #service_alias:    api_call_service # no alias by default
        salesforce:
            connection:       broker_connection
            exchange_options: {name: 'salesforce', type: direct}
            queue_options:    {name: 'salesforce'}
    consumers:
        send_email:
            connection:       broker_connection
            exchange_options: {name: 'send_email', type: direct}
            queue_options:    {name: 'email_queue'}
            callback:         send_email_call
            qos_options:      {prefetch_size: 0, prefetch_count: 1, global: false} # don't dispatch a new message to a worker until it has processed and acknowledged the previous one. 
        salesforce:
            connection:       broker_connection
            exchange_options: {name: 'salesforce', type: direct}
            queue_options:    {name: 'salesforce'}
            callback:         salesforce_call
            qos_options:      {prefetch_size: 0, prefetch_count: 1, global: false}

rabbit_mq_supervisor:
    supervisor_instance_identifier:     supervisord
    #paths:
    #    workspace_directory:            /home/george/Projects/symfony/symfony3/app/supervisor/
    #    configuration_file:             /home/george/Projects/symfony/symfony3/app/supervisor/supervisord.conf
    #    pid_file:                       /home/george/Projects/symfony/symfony3/app/supervisor/supervisord.pid
    #    sock_file:                      /home/george/Projects/symfony/symfony3/app/supervisor/supervisord.sock
    #    log_file:                       /home/george/Projects/symfony/symfony3/app/supervisor/supervisord.log
    #    worker_configuration_directory: /home/george/Projects/symfony/symfony3/app/supervisor/worker/
    #    worker_output_log_file:         /home/george/Projects/symfony/symfony3/app/supervisor/logs/%kernel.environment%.log
    #    worker_error_log_file:          /home/george/Projects/symfony/symfony3/app/supervisor/logs/%kernel.environment%.log
    #commands:
    #    rabbitmq_consumer:              user-specific-command:consumer
    #    rabbitmq_multiple_consumer:     user-specific-command:multiple-consumer
    consumer:
        general:
            messages:                   0       # consumer command option: messages to consume
            #memory-limit:               32     # consumer command option: allowed memory for this process
            debug:                      true    # consumer command option: enable debugging
            without-signals:            true    # consumer command option: disable catching of system signals
            worker:
                count:                  1       # number of workers per consumer
                startsecs:              2       # supervisord worker option: seconds to consider program running
                autorestart:            true    # supervisord worker option: if supervisord should restarted program automatically. Eg if we kill the proccess, it will start automatically 
                stopsignal:             INT     # supervisord worker option: the signal used to kill the program
                stopasgroup:            true    # supervisord worker option: if whole process group should be stopped
                stopwaitsecs:           60      # supervisord worker option: seconds to wait after stop signal before sending kill signal
        individual:
            # override options for specific consumers. you can use the same options for any consumer as in consumer.general
            send_email:
                worker:
                    count:              2
        #    consumer_name_2:
                # [â€¦]